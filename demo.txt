一、快速入门Activiti
①.我们要使用一个工作流，首先就要把这个工作流定义出来【即工作流的步骤的怎么样的】，Activiti支持以“图”的方式来定义工作流
②.定义完工作流，就要部署起来。
③.部署完之后，就可以执行该工作流，该工作流就随着我们定义的步骤来一一执行！

1.1 BPMN
业务流程建模与标注（Business Process Model and Notation，BPMN) ，描述流程的基本符号，包括这些图元如何组合成一个业务流程图（Business Process Diagram）
使用BPMN来定义工作流的流程图

1.2 Activiti框架会自动创建对应的数据库表。
   Activiti的后台有数据库的支持，所有的表都以ACT_开头。 第二部分是表示表的用途的两个字母标识。 用途也和服务的API对应。
   ACT_RE_*: 'RE'表示repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。
   ACT_RU_*: 'RU'表示runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。
   ACT_ID_*: 'ID'表示identity。 这些表包含身份信息，比如用户，组等等。
   ACT_HI_*: 'HI'表示history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。
   ACT_GE_*: 通用数据， 用于不同场景下，如存放资源文件。

1.3 Activiti开发步骤
第一.获取activiti核心--流程引擎。
    使用Activiti需要数据库的支持。虽然Activiti会自动帮我们创建对应的数据库表，但需要手动配置一些数据库信息。
    方式一：通过运行代码的方式来配置数据库信息并创建流程引擎。
    方式二：通过加载配置文件的方式来配置数据库信息并创建流程引擎。

第二.定义activiti工作流流程--流程定义（画流程图，填写相关属性）

第三.部署actitivi工作流流程--流程部署（加载上一步定义好的BPMN文件和对应的PNG文件完成流程部署；也可以加载zip压缩文件完成部署）

第四.执行activiti工作流流程（开跑一条流程）--- 每开始（开跑）一条流程就会创建一个流程实例

第五.根据代理人获取任务信息（现在流程已经跑起来了，可以根据代理人查看他的任务列表，或查看当前流程处于哪一环节）

第六.处理任务（处理人处理当前任务，然后流程根据任务id继续往下走）

1.4 idea使用Activiti插件的注意事项
    在Idea中Activiti插件不会自动生成BPMN对应的PNG图片，需要手动添加对应的PNG图片，然后才能执行相应的部署代码对流程进行部署。
    参考博客：https://www.cnblogs.com/dalianpai/p/11851332.html

二、细说流程定义
---------流程部署相关的表---------
SELECT * FROM act_ge_bytearray  # 通用字节资源表
SELECT * FROM act_ge_property   # 通用属性表，可以生成部署id
SELECT * FROM act_re_deployment # 流程部署表
SELECT * FROM act_re_procdef    # 流程定义表

2.1 在Eclipse中Activiti插件会自动生成一个BPMN与之对应的PNG图片，部署时需要加载BPMN对应的PNG图片；
    在Idea中Activiti插件不会自动生成PNG图片，但我们可以手动添加对应的PNG图片，也能成功部署。
2.2 查看流程定义
    1.通过 流程部署ID 获取流程定义列表（流程部署ID 参考 act_re_deployment中的ID）
    2.通过 流程定义key 获取流程定义列表（流程定义key 由 bpmn文件的id属性 决定，且可以实现精准或模糊查询）
    3.通过 流程定义name 获取流程定义列表（流程定义name 由 bpmn文件的name属性 决定）
    4.通过 流程定义ID 获取流程定义列表（流程定义ID：LeaveProcess:1:4  组成元素：流程定义Key + 流程定义版本 + 自动生成id）
2.3 删除流程定义
    1.通过流程部署ID删除流程定义
2.4 通过加载ZIP压缩包资源来部署流程定义（将同名的BPMN和PNG文件放在一个文件夹中并压缩）


三、细说流程实例与任务执行
---------------流程实例与任务----------
SELECT * FROM act_ru_execution   # 流程执行对象信息
SELECT * FROM act_ru_task        # 正在运行的任务表
SELECT * FROM act_hi_procinst    # 历史流程实例表
SELECT * FROM act_hi_taskinst    # 历史流程任务表

流程实例与流程对象的区别：
（1）如果是单例流程，执行对象ID就是流程实例ID
（2）如果一个流程有分支和聚合，那么执行对象ID和流程实例ID就不相同
（3）一个流程中，流程实例只有1个，执行对象可以存在多个。

3.1 开始流程（启动流程），创建流程实例 --- 每开始（开跑）一条流程就会创建一个流程实例
3.2 查看所有正在执行的任务 --- 查询act_ru_task表
3.3 获取流程实例的状态 --- 根据流程实例ID查询获取流程实例
3.4 查看历史流程实例信息 --- 查询act_hi_procinst表
3.5 查看某流程实例的历史任务信息 --- 查询act_hi_taskinst表（根据流程实例ID）
3.6 根据任务ID执行（办理）任务

四、细说流程变量
-----------流程变量表-------------
act_ru_variable：正在执行的流程变量表
act_hi_varinst：历史流程变量表

4.1 设置流程变量（TaskService和RuntimeService都可以设置流程变量）
    使用场景：
        (1)在流程开始的时候设置流程变量
        (2)在完成某个任务的时候设置流程变量
        (3)使用TaskService设置服务
        (4)使用RuntimeService设置服务
    作用：
        (1)传递业务参数
        (2)动态设置任务代理人 --- ${nextUser}
        (3)指定连接【决定流程往哪边走】
4.2 流程变量支持类型（String Integer short long double boolean date binary serializable）
    如果流程变量的类型是JavaBean类型，那么该Javabean必须实现Serializable接口且生成固定的序列化ID（否则，一旦javabean对象的属性发生变化就会抛异常）
4.3 setVariable和setVariableLocal的区别
    setVariable：设置流程变量时，若流程变量名称相同，后一次的值替换前一次的值，而且可以看到TASK_ID的字段不会存放任务ID的值
    setVariableLocal：
    (1)设置流程变量时，针对当前任务节点设置流程变量，如果一个流程中存在2个任务节点，对每个任务节点都设置流程变量，即使流程变量的名称相同，后一次的版本的值也不会替换前一次版本的值，它会使用不同的任务ID作为标识，存放2个流程变量值，而且可以看到TASK_ID的字段会存放任务ID的值。
       例如act_hi_varinst 表的数据：不同的任务节点，即使流程变量名称相同，存放的值也是不同的。
    (2)使用setVariableLocal说明流程变量绑定了当前的任务（当前任务结束，则流程变量使命结束回归历史表）。当流程继续往下执行时，下个任务获取不到这个流程变量（因为正在执行的流程变量中没有这个数据），所有查询正在执行的任务时不能查询到我们需要的数据，此时需要查询历史的流程变量。
4.4 流程变量的设置格式 --- ${message=='直接到院领导'}


五、排他网关
根据设置的流程变量的不同（流转条件的不同），实际执行的流程分支也不同。

六、更多详细信息，参考博客：https://juejin.im/post/6844903577757057038
